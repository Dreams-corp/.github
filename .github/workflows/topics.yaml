name: Update Repository Topics

on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      org_name:
        description: >-
          Name of GitHub organization.
          If empty all organization repos will be updated.
        required: true
        default: 'Netcracker'

    
jobs:
  verify-json:
    env:
      JSON_FILE: "./confit/org-mandatory-topcs/topics.json"
      CONFIG_SCHEMA: "./confit/org-mandatory-topcs/config-schema.json"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify JSON file
        uses: netcracker/qubership-workflow-hub/actions/verify-json
        with:
          json-file: ${{ env.JSON_FILE }}
          schema-file: ${{ env.CONFIG_SCHEMA }}
  update-topics:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2 Validate json file
      - name: Validate topic config file
        run: |
            INVALID_ENTRIES=$(jq -r '.[] | select(.repositoryName | contains(",")) | .repositoryName' "$JSON_FILE")

            if [ ! -f ${{ env.JSON_FILE }} ]; then
            echo "Error: topics.json file not found!"
            exit 1
            fi

            if [ -n "$DUPLICATES" ]; then
              echo "Duplicate repositoryName values found:"
              echo "$DUPLICATES"
              exit 1
            else
              echo "All repositoryName values are unique."
            fi
      # Step 3: Update repository topics
      - name: Update Topics
        run: |
          # Loop through each repository in the JSON file
          jq -c '.[]' ${{ env.JSON_FILE }} | while read -r repo; do
            REPO_NAME=$(echo "$repo" | jq -r '.repositoryName')
            TOPICS=$(echo "$repo" | jq -r '.repositoryTopics[].name' | paste -sd "," -)

            if [ -n "$TOPICS" ]; then
              echo "Updating topics for $REPO_NAME: $TOPICS"
              if ! gh repo edit "$GH_ORG"/"$REPO_NAME" --add-topic "$TOPICS"; then
            echo "Error: Repository $REPO_NAME does not exist or could not be updated. Skipping."
              fi
            else
              echo "No topics found for $REPO_NAME. Skipping."
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          GH_ORG: ${{ github.event.inputs.org_name }}
